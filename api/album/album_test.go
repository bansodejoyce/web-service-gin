package album

import (
	"encoding/json"
	"net/http/httptest"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

type AutoGenerated struct {
	ID     string  `json:"id"`
	Title  string  `json:"title"`
	Artist string  `json:"artist"`
	Price  float64 `json:"price"`
}

var mockAlbums = []AutoGenerated{
	{ID: "1", Title: "Blue Train", Artist: "John Coltrane", Price: 56.99},
	{ID: "2", Title: "Jeru", Artist: "Gerry Mulligan", Price: 17.99},
	{ID: "3", Title: "Sarah Vaughan and Clifford Brown", Artist: "Sarah Vaughan", Price: 39.99},
}

func TestGetAlbums(t *testing.T) {
	w := httptest.NewRecorder()
	c, _ := gin.CreateTestContext(w)
	GetAlbums(c)
	var got []AutoGenerated
	t.Run("Check the response code", func(t *testing.T) {
		assert.Equal(t, 200, w.Code)
	})

	t.Run("Check for the empty response", func(t *testing.T) {
		err := json.Unmarshal(w.Body.Bytes(), &got)
		if err != nil {
			t.Fatal(err)
		}
		assert.Empty(t, got)
	})

	t.Run("Verify the response received", func(t *testing.T) {
		err := json.Unmarshal(w.Body.Bytes(), &got)
		if err != nil {
			t.Fatal(err)
		}
		assert.Equal(t, mockAlbums, got)
	})

}

type AlbumNotFoundMock struct {
	message string
}

var albumNotFoundMock = AlbumNotFoundMock{
	message: "",
}

func TestGetAlbumById(t *testing.T) {
	w := httptest.NewRecorder()
	c, _ := gin.CreateTestContext(w)
	GetAlbumById(c)
	t.Run("Verify the response code if the id parameter is not passed", func(t *testing.T) {
		assert.Equal(t, 404, w.Code)
	})
}
